#!/usr/bin/env node

/**
 * Skrypt do stworzenia mapowania historycznych station_id ‚Üí UUID
 * Parsuje historyczne dane stations i tworzy mapowanie na istniejƒÖce UUID
 */

const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

console.log('üó∫Ô∏è  HYDRO API - Mapowanie Historycznych Stacji');
console.log('=' * 60);

// Funkcja do parsowania historycznych stacji z SQL
function parseHistoricalStations(filePath) {
    console.log('üìñ Parsowanie historycznych stacji...');
    
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Znajd≈∫ INSERT INTO stations
    const stationsInsertRegex = /INSERT INTO `stations`[^(]*\(([^)]+)\)\s+VALUES\s*([\s\S]*?);/gi;
    
    let match;
    const historicalStations = [];
    
    while ((match = stationsInsertRegex.exec(content)) !== null) {
        const columnNames = match[1].split(',').map(col => col.trim().replace(/`/g, ''));
        const valuesString = match[2];
        
        console.log('üìä Kolumny w historycznej tabeli stations:');
        columnNames.forEach((col, index) => {
            console.log(`   ${index + 1}. ${col}`);
        });
        
        // Parsuj warto≈õci
        const valueRegex = /\(([^)]+)\)/g;
        let valueMatch;
        
        while ((valueMatch = valueRegex.exec(valuesString)) !== null) {
            const values = parseValues(valueMatch[1]);
            
            // Mapuj na obiekt
            const station = {};
            columnNames.forEach((column, index) => {
                station[column] = values[index];
            });
            
            historicalStations.push(station);
        }
        
        break; // Bierzemy tylko pierwszy INSERT
    }
    
    console.log(`üìã Znaleziono ${historicalStations.length} historycznych stacji`);
    
    // Poka≈º przyk≈Çady
    console.log('\nüìä Przyk≈Çady historycznych stacji:');
    historicalStations.slice(0, 10).forEach(station => {
        console.log(`   ID: ${station.id} ‚Üí Code: ${station.station_code} (${station.station_name})`);
    });
    
    return historicalStations;
}

// Funkcja do parsowania warto≈õci SQL
function parseValues(valueString) {
    const values = [];
    let current = '';
    let inQuotes = false;
    let quoteChar = '';
    
    for (let i = 0; i < valueString.length; i++) {
        const char = valueString[i];
        
        if (!inQuotes && (char === "'" || char === '"')) {
            inQuotes = true;
            quoteChar = char;
        } else if (inQuotes && char === quoteChar) {
            if (valueString[i + 1] === quoteChar) {
                current += char;
                i++;
            } else {
                inQuotes = false;
                quoteChar = '';
            }
        } else if (!inQuotes && char === ',') {
            values.push(parseValue(current.trim()));
            current = '';
        } else {
            current += char;
        }
    }
    
    if (current.trim()) {
        values.push(parseValue(current.trim()));
    }
    
    return values;
}

function parseValue(value) {
    if (value === 'NULL') return null;
    if (value.startsWith("'") && value.endsWith("'")) {
        return value.slice(1, -1).replace(/''/g, "'");
    }
    if (value.startsWith('"') && value.endsWith('"')) {
        return value.slice(1, -1).replace(/""/g, '"');
    }
    if (/^\d+$/.test(value)) return parseInt(value);
    if (/^\d+\.\d+$/.test(value)) return parseFloat(value);
    return value;
}

// G≈Ç√≥wna funkcja mapowania
async function createHistoricalMapping() {
    try {
        const sqlFile = path.join(process.cwd(), 'deximstr_hydro.sql');
        
        if (!fs.existsSync(sqlFile)) {
            throw new Error('Plik deximstr_hydro.sql nie istnieje');
        }
        
        // 1. Parsuj historyczne stacje
        const historicalStations = parseHistoricalStations(sqlFile);
        
        // 2. Pobierz istniejƒÖce stacje z bazy
        console.log('\nüîå ≈ÅƒÖczenie z bazƒÖ Supabase...');
        await prisma.$connect();
        console.log('‚úÖ Po≈ÇƒÖczono z bazƒÖ');
        
        const currentStations = await prisma.station.findMany({
            select: {
                id: true,           // UUID
                stationCode: true   // Kod stacji
            }
        });
        
        console.log(`üìä Znaleziono ${currentStations.length} stacji w obecnej bazie`);
        
        // 3. Stw√≥rz mapowanie station_code ‚Üí UUID
        const codeToUuidMap = {};
        currentStations.forEach(station => {
            codeToUuidMap[station.stationCode] = station.id;
        });
        
        // 4. Stw√≥rz mapowanie historical_id ‚Üí UUID
        const historicalIdToUuidMap = {};
        const historicalIdToCodeMap = {};
        let matchedStations = 0;
        let unmatchedStations = 0;
        
        historicalStations.forEach(historicalStation => {
            const historicalId = historicalStation.id;
            const stationCode = historicalStation.station_code;
            
            // Mapuj historical_id ‚Üí station_code
            historicalIdToCodeMap[historicalId] = stationCode;
            
            // Sprawd≈∫ czy station_code istnieje w obecnej bazie
            const uuid = codeToUuidMap[stationCode];
            if (uuid) {
                historicalIdToUuidMap[historicalId] = uuid;
                matchedStations++;
            } else {
                unmatchedStations++;
                console.log(`‚ö†Ô∏è  Nie znaleziono stacji ${stationCode} w obecnej bazie (historical_id: ${historicalId})`);
            }
        });
        
        // 5. Zapisz mapowania
        const historicalMappingFile = path.join(process.cwd(), 'historical-station-mapping.json');
        fs.writeFileSync(historicalMappingFile, JSON.stringify(historicalIdToUuidMap, null, 2));
        console.log(`üíæ Zapisano mapowanie historyczne do: ${historicalMappingFile}`);
        
        const detailedMappingFile = path.join(process.cwd(), 'historical-station-mapping-detailed.json');
        const detailedMapping = historicalStations.map(station => ({
            historicalId: station.id,
            stationCode: station.station_code,
            stationName: station.station_name,
            uuid: historicalIdToUuidMap[station.id] || null,
            matched: !!historicalIdToUuidMap[station.id]
        }));
        fs.writeFileSync(detailedMappingFile, JSON.stringify(detailedMapping, null, 2));
        console.log(`üíæ Zapisano szczeg√≥≈Çy do: ${detailedMappingFile}`);
        
        // 6. Statystyki
        console.log('\nüìà Statystyki mapowania:');
        console.log(`   - Historyczne stacje: ${historicalStations.length}`);
        console.log(`   - Obecne stacje: ${currentStations.length}`);
        console.log(`   - Dopasowane: ${matchedStations}`);
        console.log(`   - Niedopasowane: ${unmatchedStations}`);
        console.log(`   - Procent dopasowania: ${((matchedStations / historicalStations.length) * 100).toFixed(1)}%`);
        
        // 7. Przyk≈Çady mapowania
        console.log('\nüìä Przyk≈Çady mapowania (pierwsze 10 dopasowanych):');
        const matchedExamples = detailedMapping.filter(s => s.matched).slice(0, 10);
        matchedExamples.forEach(station => {
            console.log(`   ${station.historicalId} ‚Üí ${station.stationCode} ‚Üí ${station.uuid} (${station.stationName})`);
        });
        
        return historicalIdToUuidMap;
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas tworzenia mapowania:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Funkcja testowa
async function testHistoricalMapping() {
    try {
        const mappingFile = path.join(process.cwd(), 'historical-station-mapping.json');
        
        if (!fs.existsSync(mappingFile)) {
            console.log('‚ùå Plik mapowania nie istnieje. Uruchom najpierw createHistoricalMapping()');
            return;
        }
        
        const mapping = JSON.parse(fs.readFileSync(mappingFile, 'utf8'));
        
        console.log('\nüß™ Test mapowania historycznego:');
        console.log(`üìä Za≈Çadowano ${Object.keys(mapping).length} mapowa≈Ñ`);
        
        // Test przyk≈Çadowych pomiar√≥w
        const testMeasurements = [
            { station_id: 1, water_level: 45 },
            { station_id: 2, water_level: 67 },
            { station_id: 3, water_level: 89 }
        ];
        
        console.log('\nüìã Test mapowania pomiar√≥w:');
        testMeasurements.forEach(measurement => {
            const mappedUuid = mapping[measurement.station_id.toString()];
            if (mappedUuid) {
                console.log(`   ‚úÖ station_id ${measurement.station_id} ‚Üí ${mappedUuid}`);
            } else {
                console.log(`   ‚ùå station_id ${measurement.station_id} ‚Üí NIE ZNALEZIONO`);
            }
        });
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas testowania mapowania:', error);
    }
}

// G≈Ç√≥wna funkcja
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--test')) {
        await testHistoricalMapping();
    } else {
        const mapping = await createHistoricalMapping();
        console.log('\nüéâ Mapowanie historyczne utworzone pomy≈õlnie!');
        console.log('\nüìã Nastƒôpne kroki:');
        console.log('1. Sprawd≈∫ plik historical-station-mapping.json');
        console.log('2. Uruchom test: node scripts/create-historical-mapping.js --test');
        console.log('3. U≈ºyj mapowania w skrypcie importu pomiar√≥w');
    }
}

if (require.main === module) {
    main();
}

module.exports = { createHistoricalMapping, testHistoricalMapping }; 